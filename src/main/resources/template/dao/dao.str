package ${system.package}.dao;

import ${system.package}.domain.${entity.className};

import org.apache.ibatis.annotations.*;
import java.util.List;

/**
 * @author ${system.author}
 * @since ${system.date}
 */
public interface ${entity.className}Dao {

    /**
     * 通过字段名字映射, select * from table
     */
    String BASE_SELECT = "SELECT " +
            ${repeat start}
            "${entity.field.columnName.padding}    AS ${entity.field.fieldName}, " +
            ${repeat end}
            "FROM ${entity.tableName}";

    @Results(id = "baseResult", value = {
            @Result(property = "userId", column = "userid"),
            @Result(property = "batchId", column = "batch_id"),
            @Result(property = "codeSecret", column = "code_secret"),
            @Result(property = "leafId", column = "leaf_id"),
            @Result(property = "createTime", column = "create_time"),
            @Result(property = "updateTime", column = "update_time")
    })
    @Select("SELECT * FROM ${entity.tableName}")
    List<${entity.className}> queryAll();

    @ResultMap("baseResult")
    @Select("SELECT * FROM ${entity.tableName} WHERE id = #{id}")
    ${entity.className} queryById(long id);

    /**
     * 添加记录
     *
     * @param ${entity.entityName} 数据库实体
     * @return 返回受影响的记录条数
     */
    int add(${entity.className} ${entity.entityName});

    /**
     * 通过主键id更新
     *
     * @param ${entity.entityName} 数据库实体
     * @return 返回受影响的记录条数
     */
    int updateById(${entity.className} ${entity.entityName});

    /**
     * 查询一条记录, 自行控制条件保证返回一条记录
     *
     * @param ${entity.entityName} 实体的非空属性会做为查询条件
     * @return 查询到的结果, 无结果将返回null
     */
    ${entity.className} queryOne(${entity.className} ${entity.entityName});

    /**
     * 查询多条记录, 自行控制条件保证返回多条记录
     *
     * @param ${entity.entityName} 实体的非空属性会作为查询条件
     * @return 查询到的结果, 无结果将返回空List
     */
    List<${entity.className}> queryList(${entity.className} ${entity.entityName});
}
